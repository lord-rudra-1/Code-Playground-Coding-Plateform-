<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= problem.title %> - Code Playground</title>

    <link rel="stylesheet" href="/css/editcode.css">
    <style>
        /* Additional responsive fixes */
        body {
            overflow-x: hidden;
            max-width: 100%;
        }
        
        .content {
            flex-direction: column;
            padding: 2rem;
            box-sizing: border-box;
            max-width: 100%;
            gap: 3px;
        }
        
        .tabs-and-content {
            margin-right: 0;
            width: 100%;
            display: flex;
            flex-direction: column;
            height: 100%;
        }
        
        .tab-content {
            padding: 2rem;
            border-radius: 8px;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            overflow-y: auto;
        }
        
        .statement-content {
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }
        
        .code-editor {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }
        
        .language-selector {
            margin-bottom: 1rem;
        }
        
        #language-select {
            padding: 0.6rem 1rem;
            border-radius: 6px;
            border: 1px solid var(--border-color, #e0e6ed);
            background-color: white;
            font-size: 1rem;
            width: 100%;
            max-width: 200px;
        }
        
        #code-editor {
            max-width: 100%;
            box-sizing: border-box;
            min-height: 450px;
            flex-grow: 1;
            border-radius: 8px;
            padding: 1rem;
            border: 2px solid var(--border-color, #e0e6ed);
        }
        
        .problem-description,
        .problem-input-format,
        .problem-output-format,
        .problem-constraints {
            overflow-wrap: break-word;
            word-wrap: break-word;
            word-break: break-word;
            max-width: 100%;
        }
        
        .result-container {
            padding: 1.5rem;
            border-radius: 8px;
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
            margin-top: 1rem;
        }
        
        .actions-container {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }
        
        .actions-container > div {
            display: flex;
            gap: 1rem;
        }
        
        #custom-input {
            flex-grow: 1;
            padding: 0.8rem 1rem;
            border-radius: 6px;
            border: 1px solid var(--border-color, #e0e6ed);
            font-size: 1rem;
        }
        
        #run-btn, #test-btn, #submit-btn {
            padding: 0.8rem 1.5rem;
            border-radius: 6px;
            font-weight: 600;
            border: none;
            cursor: pointer;
            flex: 1;
            max-width: 120px;
        }
        
        pre {
            white-space: pre-wrap;
            word-wrap: break-word;
            max-width: 100%;
            overflow-x: auto;
            padding: 1rem;
            background-color: #f8f9fa;
            border-radius: 4px;
        }
        
        /* Contest-specific styles */
        .contest-update {
            margin-top: 15px;
            padding: 10px 15px;
            border-radius: 5px;
            background-color: #f8f9fa;
            border-left: 3px solid #6c757d;
        }
        
        .contest-update.success {
            border-left-color: #28a745;
            background-color: #f0fff0;
        }
        
        .contest-update p {
            margin: 5px 0;
        }
        
        .contest-results {
            margin: 15px 0;
            padding: 10px 15px;
            border-radius: 5px;
            background-color: #f0f8ff;
            border-left: 3px solid #007bff;
        }
        
        .contest-results h4 {
            margin-top: 0;
            color: #007bff;
        }
        
        #leaderboard-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }
        
        #leaderboard-table th,
        #leaderboard-table td {
            padding: 8px 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        
        #leaderboard-table th {
            background-color: #f2f2f2;
            font-weight: bold;
        }
        
        #leaderboard-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        
        #leaderboard-table tr:hover {
            background-color: #f1f1f1;
        }
        
        /* Highlight your position in the leaderboard */
        .your-rank {
            background-color: #e6f7ff !important;
            font-weight: bold;
        }
        
        /* styles for test case display */
        .test-case {
            margin-bottom: 20px;
            padding: 15px;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
        
        .test-case.pass {
            border-left: 4px solid #28a745;
        }
        
        .test-case.fail {
            border-left: 4px solid #dc3545;
        }
        
        .success {
            color: #28a745;
        }
        
        .error {
            color: #dc3545;
        }
        
        @media (min-width: 992px) {
            .content {
                flex-direction: row;
                padding: 2.5rem;
                align-items: stretch;
                gap: 3px;
                min-height: calc(100vh - 9rem); /* Account for navbar and padding */
            }
            
            .tabs-and-content {
                flex: 1;
                margin-right: 3px;
                height: auto;
                display: flex;
                flex-direction: column;
                max-width: calc(50%);
                min-width: calc(50%);
            }
            
            .code-editor {
                flex: 1.5;
                display: flex;
                flex-direction: column;
                min-width: calc(50%);
                max-width: calc(50%);
            }
            
            #code-editor {
                flex-grow: 1;
                min-height: auto;
                height: calc(100vh - 20rem); /* Account for navbar, padding, and other elements */
            }
        }
    </style>
    <script src="https://unpkg.com/monaco-editor@latest/min/vs/loader.js"></script>
    <script>
        require.config({ paths: { 'vs': 'https://unpkg.com/monaco-editor@latest/min/vs' } });
        require(['vs/editor/editor.main'], function () {
            const savedCode = localStorage.getItem('code') || getInitialCode('java');
            const savedLanguage = localStorage.getItem('language') || 'java';

            const editor = monaco.editor.create(document.getElementById('editor'), {
                value: savedCode,
                language: savedLanguage
            });

            document.getElementById('language-select').value = savedLanguage;

            document.getElementById('language-select').onchange = function () {
                const selectedLanguage = this.value;
                const template = getInitialCode(selectedLanguage);
                editor.setValue(template);
                monaco.editor.setModelLanguage(editor.getModel(), selectedLanguage);
                localStorage.setItem('language', selectedLanguage);
                localStorage.setItem('code', template);
            };

            editor.onDidChangeModelContent(() => {
                const code = editor.getValue();
                localStorage.setItem('code', code);
            });

            document.getElementById('runButton').onclick = function () {
                const code = editor.getValue();
                const selectedLanguage = document.getElementById('language-select').value;
                runCode(code, selectedLanguage);
            };

            function getInitialCode(language) {
                switch (language) {
                    case 'java':
                        return 'import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Main\n{\n    public static void main(String[] args) throws java.lang.Exception\n    {\n        // your code goes here\n    }\n}';
                    case 'cpp':
                        return '#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}';
                    case 'python':
                        return '# Your Python code here';
                    case 'C':
                        return '#include <stdio.h>\n\nint main() {\n    // Your code here\n    return 0;\n}';
                }
            }

            function runCode(code, language) {
                const outputDiv = document.getElementById('output');
                outputDiv.innerHTML = '';
                fetch('/run', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ code, language }),
                })
                .then(response => response.json())
                    .then(data => {
                        outputDiv.innerHTML = `<pre>${data.output || data.error}</pre>`;
                    })
                    .catch(error => {
                        outputDiv.innerHTML = `<pre>Error: ${error.message}</pre>`;
                    });

            }

            // Tab functionality
            const tabs = document.querySelectorAll('.tabs button');
            const contents = document.querySelectorAll('.tab-content > div');

            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    tabs.forEach(t => t.classList.remove('active'));
                    contents.forEach(content => content.style.display = 'none');

                    tab.classList.add('active');
                    const selectedTab = tab.getAttribute('data-tab');
                    document.querySelector(`.${selectedTab}-content`).style.display = 'block';
                });
            });
        });
    </script>
    <script>
        // Add this script to the head section to detect if the problem is being solved as part of a contest
        document.addEventListener('DOMContentLoaded', () => {
            // Check for URL parameters to see if we're in a contest
            const urlParams = new URLSearchParams(window.location.search);
            const contestId = urlParams.get('contestId');
            
            // Store contest ID if present
            if (contestId) {
                localStorage.setItem('currentContestId', contestId);
                console.log('Working on contest problem:', contestId);
            }
        });
    </script>
</head>

<body>
    <nav class="navbar">
        <div class="logo">
            <a href="/home">
                <img src="/lo.png" alt="Logo">
            </a>
        </div>
        <ul class="nav-links">
            <li><a href="/explore">Explore</a></li>
            <li><a href="/problems">Problems</a></li>
            <li><a href="/contests">Contests</a></li>
            <li><a href="/discuss">Discuss</a></li>
            <li><a href="/contact">Contact Us</a></li>
            <li><a href="/profile" id="profile-link">👤</a></li>
        </ul>
    </nav>

    <div class="content">
        <div class="tabs-and-content">
            <div class="tabs">
                <button class="active" data-tab="statement">Statement</button>
                <button data-tab="submissions">Submissions</button>
                <button data-tab="solution">Solution</button>
            </div>

            <div class="tab-content">
                <div class="statement-content">
                    <h2>Problem: <%= problem.title %></h2>
                    <p><strong>Difficulty:</strong> <span class="<%= problem.difficulty.toLowerCase() %>"><%= problem.difficulty %></span></p>
                    <div class="problem-description">
                        <%- problem.description %>
                    </div>
                    
                    <% if (problem.inputFormat) { %>
                    <div class="problem-input-format">
                        <h3>Input Format</h3>
                        <p><%- problem.inputFormat %></p>
                    </div>
                    <% } %>
                    
                    <% if (problem.outputFormat) { %>
                    <div class="problem-output-format">
                        <h3>Output Format</h3>
                        <p><%- problem.outputFormat %></p>
                    </div>
                    <% } %>
                    
                    <% if (problem.constraints) { %>
                    <div class="problem-constraints">
                        <h3>Constraints</h3>
                        <ul>
                            <% 
                            // Handle different possible formats of constraints
                            try {
                                if (problem.constraints instanceof Map) {
                                    // If it's a native Map object
                                    for (const [constraint, description] of problem.constraints.entries()) { %>
                                        <li><code><%= constraint %></code>: <%= description %></li>
                                    <% }
                                } else if (problem.constraints.constructor && problem.constraints.constructor.name === 'Map') {
                                    // If it's a MongoDB Map object with get method
                                    const keys = Array.from(problem.constraints.keys());
                                    for (const key of keys) { %>
                                        <li><code><%= key %></code>: <%= problem.constraints.get(key) %></li>
                                    <% }
                                } else if (typeof problem.constraints === 'object') {
                                    // If it's a plain object
                                    Object.entries(problem.constraints).forEach(([key, value]) => {
                                        if (key !== '_parent' && key !== '_path' && key !== '_schemaType') { %>
                                            <li><code><%= key %></code>: <%= value %></li>
                                        <% }
                                    });
                                }
                            } catch (e) { %>
                                <li>Error rendering constraints: <%= e.message %></li>
                            <% } %>
                        </ul>
                    </div>
                    <% } %>
                </div>

                <div class="submissions-content" style="display: none;">
                    <h2>Submissions</h2>
                    <div id="user-submissions">
                        <!-- User submissions will be loaded here -->
                        <p>Loading submissions...</p>
                    </div>
                </div>

                <div class="solution-content" style="display: none;">
                    <h2>Test Results</h2>
                    <div id="test-results">
                        <!-- Test results will be shown here -->
                        <p>Run your code against test cases to see results</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="code-editor">
            <div class="language-selector">
                <select id="language-select">
                    <option value="java">Java</option>
                    <option value="cpp">C++</option>
                    <option value="python">Python</option>
                    <option value="c">C</option>
                    <!-- Add more language options as needed -->
                </select>
            </div>
            <textarea rows="20" cols="100" id="code-editor"> 
            </textarea>
            <div class="actions-container">
                <div>
                    <button id="run-btn">Run</button>
                    <button id="test-btn">Test</button>
                    <button id="submit-btn">Submit</button>
                </div>
            </div>
            <div class="result-container" id="result-container" style="display: none;">
                <div class="result-title">Output:</div>
                <div class="result-content" id="result-output"></div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        const problemId = '<%= problem._id %>';
        let userId = localStorage.getItem('userId');
        
        // Check if problem data was passed correctly
        if (typeof problemId === 'undefined' || !problemId) {
            console.error('Problem ID is missing');
            alert('Error: Problem not found. Redirecting to problems page.');
            window.location.href = '/problems';
        }
        
        // Update profile link based on login status
        document.addEventListener('DOMContentLoaded', () => {
            const profileLink = document.getElementById('profile-link');
            
            if (userId) {
                // User is logged in, keep the profile link as is
                profileLink.title = "View Profile";
            } else {
                // User is not logged in, change the icon to indicate this
                profileLink.innerHTML = "👤 (Sign In)";
                profileLink.title = "Please Sign In";
            }
        });
        
        // Tab switching functionality
        const tabButtons = document.querySelectorAll('.tabs button');
        const tabContents = document.querySelectorAll('.tab-content > div');

        tabButtons.forEach((button, index) => {
            button.addEventListener('click', () => {
                // Remove active class from all buttons and contents
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.style.display = 'none');

                button.classList.add('active');
                tabContents[index].style.display = 'block';

                // If switching to submissions tab, load submissions
                if (button.dataset.tab === 'submissions' && userId) {
                    loadUserSubmissions();
                }
            });
        });

        // Language selection functionality
        const languageSelect = document.getElementById('language-select');
        const codeEditor = document.getElementById('code-editor');

        // Auto-select the first language option and display its content
        languageSelect.value = 'java';
        updateCodeTemplate();

        languageSelect.addEventListener('change', updateCodeTemplate);

        function updateCodeTemplate() {
            const selectedLanguage = languageSelect.value;
            switch (selectedLanguage) {
                case 'java':
                    codeEditor.value = 'import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Main\n{\n    public static void main(String[] args) throws java.lang.Exception\n    {\n        // your code goes here\n    }\n}';
                    break;
                case 'cpp':
                    codeEditor.value = '#include <bits/stdc++.h>\nusing namespace std;\n\nint main() {\n    // Your code here\n    return 0;\n}';
                    break;
                case 'python':
                    codeEditor.value = '# Your Python code here\n';
                    break;
                case 'c':
                    codeEditor.value = '#include<stdio.h>\n\nint main(){\n // your code goes here \n\n}';
                    break;
            }
        }

        // Run code functionality
        document.getElementById('run-btn').addEventListener('click', async () => {
            const code = codeEditor.value;
            const language = languageSelect.value;
            let input = '';
            
            if (!code) {
                alert('Please enter some code first');
                return;
            }
            
            // Get the first test case input
            try {
                const problemResponse = await fetch(`/api/problems/${problemId}`);
                const problem = await problemResponse.json();
                
                if (problem.testCases && problem.testCases.length > 0) {
                    input = problem.testCases[0].input;
                }
            } catch (error) {
                console.error('Error fetching test case input:', error);
            }

            try {
                const resultContainer = document.getElementById('result-container');
                const resultOutput = document.getElementById('result-output');
                resultContainer.style.display = 'block';
                resultOutput.innerHTML = 'Running...';

                const response = await fetch('/api/execute', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ code, language, input })
                });
                
                const result = await response.json();
                
                if (result.status === 'error') {
                    resultOutput.innerHTML = `<span class="error">${result.error || 'An error occurred'}</span>`;
                } else {
                    resultOutput.innerHTML = result.output || 'No output';
                    if (result.error) {
                        resultOutput.innerHTML += `\n<span class="error">${result.error}</span>`;
                    }
                }
            } catch (error) {
                console.error('Error running code:', error);
                const resultContainer = document.getElementById('result-container');
                const resultOutput = document.getElementById('result-output');
                resultContainer.style.display = 'block';
                resultOutput.innerHTML = `<span class="error">Failed to run code: ${error.message}</span>`;
            }
        });

        // Test code against test cases functionality
        document.getElementById('test-btn').addEventListener('click', async () => {
            const code = codeEditor.value;
            const language = languageSelect.value;
            
            if (!code) {
                alert('Please enter some code first');
                return;
            }
            
            try {
                // Show a loading indicator
                document.getElementById('test-results').innerHTML = '<div class="loading">Running tests...</div>';
                
                // Switch to the solution tab
                tabButtons.forEach(btn => btn.classList.remove('active'));
                tabContents.forEach(content => content.style.display = 'none');
                
                tabButtons[2].classList.add('active');
                tabContents[2].style.display = 'block';
                
                // Get user ID and contest ID if available
                const userId = localStorage.getItem('userId');
                const contestId = localStorage.getItem('currentContestId');
                
                // Fetch problem's test cases
                const problemResponse = await fetch(`/api/problems/${problemId}`);
                const problem = await problemResponse.json();
                
                if (!problem.testCases || problem.testCases.length === 0) {
                    document.getElementById('test-results').innerHTML = 'No test cases available for this problem.';
                    return;
                }
                
                const problemTestCases = problem.testCases;
                
                // Test against each test case
                const response = await fetch('/api/execute/test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        code,
                        language,
                        testCases: problemTestCases,
                        userId: userId || null,
                        problemId: problemId,
                        contestId: contestId || null
                    })
                });
                
                const result = await response.json();
                
                // Display test results
                let resultsHtml = `
                    <div class="test-summary">
                        <h3>Status: <span class="${result.status === 'Accepted' ? 'success' : 'error'}">${result.status}</span></h3>
                    </div>
                    <h4>Test Cases:</h4>
                `;
                
                result.results.forEach((testResult, index) => {
                    resultsHtml += `
                        <div class="test-case ${testResult.passed ? 'pass' : 'fail'}">
                            <h4>Test Case ${index + 1} - ${testResult.passed ? 'Passed' : 'Failed'}</h4>
                            <div>
                                <strong>Input:</strong> 
                                <pre>${testResult.input}</pre>
                            </div>
                            <div>
                                <strong>Expected Output:</strong> 
                                <pre>${testResult.expectedOutput}</pre>
                            </div>
                            <div>
                                <strong>Your Output:</strong> 
                                <pre>${testResult.actualOutput}</pre>
                            </div>
                            ${testResult.error ? `<div class="error"><strong>Error:</strong> ${testResult.error}</div>` : ''}
                        </div>
                    `;
                });
                
                document.getElementById('test-results').innerHTML = resultsHtml;
            } catch (error) {
                console.error('Error testing code:', error);
                document.getElementById('test-results').innerHTML = `<div class="error">Failed to test code: ${error.message}</div>`;
            }
        });

        // Submit solution functionality
        document.getElementById('submit-btn').addEventListener('click', async () => {
            if (!userId) {
                alert('Please sign in to submit your solution');
                return;
            }
            
            const code = codeEditor.value;
            const language = languageSelect.value;
            
            if (!code) {
                alert('Please enter some code first');
                return;
            }
            
            try {
                // Show a loading indicator
                document.getElementById('result-container').style.display = 'block';
                document.getElementById('result-output').innerHTML = 'Submitting solution...';
                
                // Check if we're in a contest
                const contestId = localStorage.getItem('currentContestId');
                
                const response = await fetch(`/api/problems/${problemId}/submit`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ 
                        userId, 
                        code, 
                        language,
                        contestId: contestId || null // Include contest ID if present
                    })
                });
                
                const result = await response.json();
                
                if (response.ok) {
                    // Display submission status
                    let submissionMessage = `<span class="${result.status === 'Accepted' ? 'success' : 'error'}">
                        Submission result: ${result.message}
                    </span>`;
                    
                    // Show contest update info if present
                    if (contestId && result.contestUpdate) {
                        const contestUpdate = result.contestUpdate;
                        if (contestUpdate.updated) {
                            submissionMessage += `<div class="contest-update success">
                                <p>Contest leaderboard updated!</p>
                                <p>Your current score: ${contestUpdate.totalScore}</p>
                                <p>Problems solved: ${contestUpdate.problemsCount}</p>
                            </div>`;
                        } else {
                            // If problem was already solved or submission wasn't accepted
                            submissionMessage += `<div class="contest-update">
                                <p>${contestUpdate.message || 'No change in contest score'}</p>
                                <p>Your current score: ${contestUpdate.totalScore}</p>
                                <p>Problems solved: ${contestUpdate.problemsCount}</p>
                            </div>`;
                        }
                    }
                    
                    document.getElementById('result-output').innerHTML = submissionMessage;
                    
                    // If there are test results, show them
                    if (result.results && result.results.length > 0) {
                        // Switch to the solution tab to show test results
                        tabButtons.forEach(btn => btn.classList.remove('active'));
                        tabContents.forEach(content => content.style.display = 'none');
                        
                        tabButtons[2].classList.add('active');
                        tabContents[2].style.display = 'block';
                        
                        // Format the test results similar to the test button
                        let resultsHtml = `
                            <div class="test-summary">
                                <h3>Status: <span class="${result.status === 'Accepted' ? 'success' : 'error'}">${result.status}</span></h3>
                            </div>`;
                            
                        // Add contest info if this is a contest submission
                        if (contestId && result.contestUpdate) {
                            const contestUpdate = result.contestUpdate;
                            resultsHtml += `<div class="contest-results">
                                <h4>Contest Submission:</h4>
                                <p>${contestUpdate.message || (contestUpdate.updated ? 'Score updated' : 'No score change')}</p>
                                <p>Your current score: ${contestUpdate.totalScore}</p>
                            </div>`;
                        }
                        
                        resultsHtml += '<h4>Test Cases:</h4>';
                        
                        result.results.forEach((testResult, index) => {
                            resultsHtml += `
                                <div class="test-case ${testResult.passed ? 'pass' : 'fail'}">
                                    <h4>Test Case ${index + 1} - ${testResult.passed ? 'Passed' : 'Failed'}</h4>
                                    <div>
                                        <strong>Input:</strong> 
                                        <pre>${testResult.input}</pre>
                                    </div>
                                    <div>
                                        <strong>Expected Output:</strong> 
                                        <pre>${testResult.expected}</pre>
                                    </div>
                                    <div>
                                        <strong>Your Output:</strong> 
                                        <pre>${testResult.actual}</pre>
                                    </div>
                                    ${testResult.error ? `<div class="error"><strong>Error:</strong> ${testResult.error}</div>` : ''}
                                </div>
                            `;
                        });
                        
                        document.getElementById('test-results').innerHTML = resultsHtml;
                    }
                    
                    // Load submissions in the background
                    loadUserSubmissions();
                    
                    // If this was a contest submission and was successful, refresh the page
                    // after a short delay to show the updated contest info
                    if (contestId && result.status === 'Accepted' && result.contestUpdate) {
                        setTimeout(() => {
                            const shouldRefresh = confirm('Solution submitted successfully! Refresh to see updated contest status?');
                            if (shouldRefresh) {
                                // To ensure we come back to the same problem with contest context
                                window.location.href = window.location.pathname + '?contestId=' + contestId;
                            }
                        }, 2000);
                    }
                } else {
                    document.getElementById('result-output').innerHTML = `<span class="error">Error: ${result.message || 'Failed to submit solution'}</span>`;
                }
            } catch (error) {
                console.error('Error submitting solution:', error);
                document.getElementById('result-container').style.display = 'block';
                document.getElementById('result-output').innerHTML = `<span class="error">Error submitting solution: ${error.message}</span>`;
            }
        });

        // Function to load user submissions
        async function loadUserSubmissions() {
            if (!userId) {
                document.getElementById('user-submissions').innerHTML = '<p>Please sign in to view your submissions</p>';
                return;
            }
            
            try {
                const response = await fetch(`/api/auth/user/${userId}/submissions`);
                const submissions = await response.json();
                
                // Filter submissions for this problem
                const problemSubmissions = submissions.filter(sub => sub.problem === problemId);
                
                if (problemSubmissions.length === 0) {
                    document.getElementById('user-submissions').innerHTML = '<p>No submissions yet for this problem</p>';
                    return;
                }
                
                let submissionsHtml = `
                    <table class="submissions-table">
                        <thead>
                            <tr>
                                <th>Status</th>
                                <th>Language</th>
                                <th>Submitted</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                `;
                
                problemSubmissions.forEach(submission => {
                    const date = new Date(submission.timestamp);
                    submissionsHtml += `
                        <tr>
                            <td class="${submission.status === 'Accepted' ? 'success' : 'error'}">${submission.status}</td>
                            <td>${submission.language}</td>
                            <td>${date.toLocaleString()}</td>
                            <td><button onclick="loadSubmissionCode('${submission._id}')">View Code</button></td>
                        </tr>
                    `;
                });
                
                submissionsHtml += `
                        </tbody>
                    </table>
                `;
                
                document.getElementById('user-submissions').innerHTML = submissionsHtml;
            } catch (error) {
                console.error('Error loading submissions:', error);
                document.getElementById('user-submissions').innerHTML = `<p class="error">Error loading submissions: ${error.message}</p>`;
            }
        }

        // Function to load submission code
        window.loadSubmissionCode = async function(submissionId) {
            try {
                const response = await fetch(`/api/auth/submissions/${submissionId}`);
                const submission = await response.json();
                
                if (response.ok) {
                    // Set the code editor to the submission code
                    codeEditor.value = submission.code;
                    
                    // Set the language selector
                    languageSelect.value = submission.language;
                }
            } catch (error) {
                console.error('Error loading submission code:', error);
                alert(`Error loading submission code: ${error.message}`);
            }
        };

        // Check for user authentication on page load
        document.addEventListener('DOMContentLoaded', () => {
            const userId = localStorage.getItem('userId');
            if (!userId) {
                console.log('User not signed in');
                // You might want to show a sign-in prompt
            }
        });
    </script>
</body>
</html>