<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Problems - Code Playground</title>
    <link rel="stylesheet" href="/css/problems.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>

<body>
    <!-- Navbar -->
    <nav class="navbar">
        <div class="logo">
            <a href="/explore">
                <img src="/lo.png" alt="Code Playground Logo">
            </a>
        </div>
        <button class="menu-toggle" aria-label="Toggle menu">â˜°</button>
        <ul class="nav-links">
            <li><a href="/explore">Explore</a></li>
            <li><a href="/problems">Problems</a></li>
            <li><a href="/contests">Contests</a></li>
            <li><a href="/discuss">Discuss</a></li>
            <li><a href="/contact">Contact Us</a></li>
            <li><a href="/profile" id="profile-link">ðŸ‘¤</a></li>
        </ul>
    </nav>

    <main>
        <!-- Problem Filters -->
        <div class="filter-container">
            <input type="text" id="search-bar" placeholder="Search problems..." aria-label="Search problems">
            <select id="difficulty" aria-label="Filter by difficulty">
                <option value="all">All Difficulties</option>
                <option value="Easy">Easy</option>
                <option value="Medium">Medium</option>
                <option value="Hard">Hard</option>
            </select>
            <select id="sort" aria-label="Sort problems">
                <option value="newest">Newest</option>
                <option value="most-solved">Most Solved</option>
                <option value="difficulty">Difficulty</option>
            </select>
        </div>

        <!-- Problems Table -->
        <div class="problems-container">
            <table aria-label="Coding problems">
                <thead>
                    <tr>
                        <th scope="col">Title</th>
                        <th scope="col">Difficulty</th>
                        <th scope="col">Acceptance</th>
                    </tr>
                </thead>
                <tbody id="problems-list">
                    <!-- Problems will be loaded here dynamically -->
                    <tr>
                        <td colspan="3" class="loading-text">Loading problems...</td>
                    </tr>
                </tbody>
            </table>
        </div>
    </main>

    <!-- Footer -->
    <footer class="footer">
        <p>&copy; 2025 Code Playground. All rights reserved.</p>
    </footer>

    <!-- Scripts -->
    <script>
        document.querySelector('.menu-toggle').addEventListener('click', function() {
            document.querySelector('.nav-links').classList.toggle('active');
        });

        // Close mobile menu when clicking outside
        document.addEventListener('click', function(event) {
            const navLinks = document.querySelector('.nav-links');
            const menuToggle = document.querySelector('.menu-toggle');
            
            if (navLinks.classList.contains('active') && 
                !event.target.closest('.nav-links') && 
                event.target !== menuToggle) {
                navLinks.classList.remove('active');
            }
        });
        
        // Function to open a problem - defined in global scope
        function openProblem(problemId) {
            window.location.href = `/editcode/${problemId}`;
        }

        // Helper function to calculate acceptance rate (global scope)
        function calculateAcceptance(problem) {
            // In a real implementation, this would be calculated based on submissions
            // For now, we'll just return a random percentage
            return Math.floor(Math.random() * 100) + '%';
        }

        // Check if user is logged in and update UI accordingly
        document.addEventListener('DOMContentLoaded', () => {
            const userId = localStorage.getItem('userId');
            const profileLink = document.getElementById('profile-link');

            if (userId) {
                // User is logged in, keep the profile link as is
                profileLink.title = "View Profile";
            } else {
                // User is not logged in, change the icon to indicate this
                profileLink.innerHTML = "ðŸ‘¤";
                profileLink.title = "Please Sign In";
            }

            // Function to fetch problems from the API
            async function fetchProblems(filters = {}) {
                try {
                    // Build query string from filters
                    const queryParams = new URLSearchParams();

                    if (filters.difficulty && filters.difficulty !== 'all') {
                        queryParams.append('difficulty', filters.difficulty);
                    }

                    if (filters.topic && filters.topic !== 'all') {
                        queryParams.append('topic', filters.topic);
                    }

                    if (filters.sort) {
                        queryParams.append('sort', filters.sort);
                    }

                    const queryString = queryParams.toString() ? `?${queryParams.toString()}` : '';

                    // Fetch problems from the API
                    const response = await fetch(`/api/problems${queryString}`);
                    const problems = await response.json();

                    // Display problems
                    displayProblems(problems);
                } catch (error) {
                    console.error('Error fetching problems:', error);
                    document.getElementById('problems-list').innerHTML = `
                        <tr>
                            <td colspan="3" class="error-text">Error loading problems. Please try again later.</td>
                        </tr>
                    `;
                }
            }

            // Function to display problems in the table
            function displayProblems(problems) {
                const problemsList = document.getElementById('problems-list');

                if (!problems || problems.length === 0) {
                    problemsList.innerHTML = `
                        <tr>
                            <td colspan="3" class="empty-text">No problems found.</td>
                        </tr>
                    `;
                    return;
                }

                // Filter problems based on search term
                const searchTerm = document.getElementById('search-bar').value.toLowerCase();
                const filteredProblems = searchTerm
                    ? problems.filter(problem => problem.title.toLowerCase().includes(searchTerm))
                    : problems;

                if (filteredProblems.length === 0) {
                    problemsList.innerHTML = `
                        <tr>
                            <td colspan="3" class="empty-text">No problems match your search.</td>
                        </tr>
                    `;
                    return;
                }

                // Generate HTML for each problem
                problemsList.innerHTML = filteredProblems.map(problem => `
                    <tr onclick="openProblem('${problem._id}')" tabindex="0" role="button" aria-label="Open ${problem.title}, ${problem.difficulty} difficulty">
                        <td>${problem.title}</td>
                        <td class="difficulty-cell"><span class="${problem.difficulty.toLowerCase()}">${problem.difficulty}</span></td>
                        <td>${calculateAcceptance(problem)}</td>
                    </tr>
                `).join('');
            }

            // Event listeners for filters
            document.getElementById('difficulty').addEventListener('change', applyFilters);
            document.getElementById('sort').addEventListener('change', applyFilters);

            // Debounce function for search
            let searchTimeout;
            document.getElementById('search-bar').addEventListener('input', () => {
                clearTimeout(searchTimeout);
                searchTimeout = setTimeout(applyFilters, 300);
            });

            // Function to apply filters
            function applyFilters() {
                const difficulty = document.getElementById('difficulty').value;
                const sort = document.getElementById('sort').value;

                fetchProblems({ difficulty, sort });
            }

            // Fetch problems on page load
            fetchProblems();
        });
    </script>
</body>

</html>