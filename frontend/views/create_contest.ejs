<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Contest - Code Playground</title>
    <style>
        /* Main container styles */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f7fa;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header styles */
        .navbar {
            background-color: #2c3e50;
            color: white;
            padding: 15px 0;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }

        .navbar .container {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .logo img {
            height: 40px;
        }

        .nav-links {
            display: flex;
            list-style: none;
            gap: 20px;
            margin: 0;
            padding: 0;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-weight: 500;
            transition: color 0.3s;
        }

        .nav-links a:hover {
            color: #3498db;
        }

        /* Form styles */
        .contest-section {
            background: white;
            border-radius: 8px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-top: 30px;
        }

        .contest-header {
            margin-bottom: 30px;
            text-align: center;
        }

        .contest-header h1 {
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .form-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .full-width {
            grid-column: 1 / -1;
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }

        input[type="text"],
        input[type="datetime-local"],
        select,
        textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
            transition: border 0.3s;
        }

        input[type="text"]:focus,
        input[type="datetime-local"]:focus,
        select:focus,
        textarea:focus {
            border-color: #3498db;
            outline: none;
        }

        textarea {
            min-height: 120px;
            resize: vertical;
        }

        /* Problem search styles */
        .search-container {
            position: relative;
            margin-bottom: 20px;
        }

        .search-results {
            position: absolute;
            width: 100%;
            max-height: 300px;
            overflow-y: auto;
            background: white;
            border: 1px solid #ddd;
            border-top: none;
            border-radius: 0 0 4px 4px;
            z-index: 100;
            display: none;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .search-result-item {
            padding: 12px;
            cursor: pointer;
            border-bottom: 1px solid #eee;
            transition: background 0.2s;
        }

        .search-result-item:hover {
            background-color: #f8f9fa;
        }

        .search-result-item strong {
            color: #2c3e50;
        }

        .text-muted {
            color: #7f8c8d;
            font-size: 14px;
        }

        /* Selected problems list */
        .problem-list {
            margin-top: 15px;
            border: 1px solid #eee;
            border-radius: 4px;
            padding: 15px;
            min-height: 100px;
            background: #f8f9fa;
        }

        .selected-problem {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px;
            background: white;
            margin-bottom: 8px;
            border-radius: 4px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .remove-problem {
            cursor: pointer;
            color: #e74c3c;
            font-weight: bold;
            padding: 0 5px;
        }

        .empty-message {
            color: #7f8c8d;
            text-align: center;
            margin: 20px 0;
        }

        /* Button styles */
        .form-actions {
            grid-column: 1 / -1;
            display: flex;
            justify-content: flex-end;
            gap: 15px;
            margin-top: 30px;
        }

        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s;
        }

        .btn-primary {
            background-color: #3498db;
            color: white;
        }

        .btn-primary:hover {
            background-color: #2980b9;
        }

        .btn-secondary {
            background-color: #e74c3c;
            color: white;
        }

        .btn-secondary:hover {
            background-color: #c0392b;
        }

        /* Visibility control */
        .visibility-control {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 4px;
        }

        .admin-only {
            color: #e67e22;
            font-weight: bold;
            display: none;
        }

        /* Footer styles */
        .footer {
            background-color: #2c3e50;
            color: white;
            text-align: center;
            padding: 20px 0;
            margin-top: 50px;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .form-grid {
                grid-template-columns: 1fr;
            }
            
            .navbar .container {
                flex-direction: column;
                gap: 15px;
            }
            
            .contest-section {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="container">
            <div class="logo">
                <a href="/explore">
                    <img src="../imgg/lo.png" >
                </a>
            </div>
            <ul class="nav-links">
                <li><a href="/explore">Explore</a></li>
                <li><a href="/problems">Problems</a></li>
                <li><a href="/contests">Contests</a></li>
                <li><a href="/discuss">Discuss</a></li>
                <li><a href="/contact">Contact Us</a></li>
                <li><a href="/profile">ðŸ‘¤</a></li>
            </ul>
        </div>
    </nav>

    <main class="container">
        <section class="contest-section">
            <div class="contest-header">
                <h1>Create a New Contest</h1>
                <p>Fill out the form below to create your custom coding competition</p>
            </div>

            <form id="create-contest-form" class="form-grid">
                <!-- Basic Information -->
                <div class="form-group">
                    <label for="contest-name">Contest Name *</label>
                    <input type="text" id="contest-name" name="name" required placeholder="Enter contest name">
                </div>

                <div class="form-group">
                    <label for="contest-code">Contest Code *</label>
                    <input type="text" id="contest-code" name="contestCode" required placeholder="Unique identifier">
                </div>

                <!-- Timing -->
                <div class="form-group">
                    <label for="start-time">Start Time *</label>
                    <input type="datetime-local" id="start-time" name="startTime" required>
                </div>

                <div class="form-group">
                    <label for="end-time">End Time *</label>
                    <input type="datetime-local" id="end-time" name="endTime" required>
                </div>

                <!-- Difficulty -->
                <div class="form-group">
                    <label for="difficulty">Difficulty Level</label>
                    <select id="difficulty" name="difficulty">
                        <option value="Easy">Easy</option>
                        <option value="Medium" selected>Medium</option>
                        <option value="Hard">Hard</option>
                    </select>
                </div>

                <!-- Visibility Control -->
                <div class="form-group">
                    <label for="visibility">Contest Visibility *</label>
                    <select id="visibility" name="visibility" required>
                        <option value="Private">Private</option>
                        <!-- Public option will be added dynamically for admins -->
                    </select>
                    <span id="admin-only-label" class="admin-only">(Admin Only)</span>
                </div>

                <!-- Description -->
                <div class="form-group full-width">
                    <label for="contest-description">Description</label>
                    <textarea id="contest-description" name="description" rows="4" placeholder="Describe your contest"></textarea>
                </div>

                <!-- Problem Selection Section -->
                <div class="form-group full-width">
                    <div class="form-section">
                        <h3>Problem Management</h3>
                        <p>Select problems from the problem bank</p>

                        <div class="search-container">
                            <input type="text" id="problem-search" class="search-input" placeholder="Search problems by title or difficulty...">
                            <div id="search-results" class="search-results"></div>
                        </div>

                        <div class="problem-selection">
                            <h4>Selected Problems *</h4>
                            <div class="problem-list" id="selected-problems">
                                <p class="empty-message">No problems selected yet</p>
                            </div>
                            <input type="hidden" id="selected-problems-input" name="problems">
                        </div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="form-actions">
                    <button type="reset" class="btn btn-secondary">Reset Form</button>
                    <button type="submit" class="btn btn-primary">Create Contest</button>
                </div>
            </form>
        </section>
    </main>

    <footer class="footer">
        <div class="container">
            <p>&copy; 2023 Code Playground. All rights reserved.</p>
        </div>
    </footer>

    <script>
        document.addEventListener('DOMContentLoaded', async function() {
            // DOM Elements
            const problemSearch = document.getElementById('problem-search');
            const searchResults = document.getElementById('search-results');
            const selectedProblems = document.getElementById('selected-problems');
            const selectedProblemsInput = document.getElementById('selected-problems-input');
            const form = document.getElementById('create-contest-form');
            const adminOnlyLabel = document.getElementById('admin-only-label');
            
            // State
            let selectedProblemsList = [];
            let debounceTimer;
            let isAdmin = false;

            // List of admin user IDs (must match your backend)
            const ADMIN_USER_IDS = [
                '67ea948007fde9615f747b4d',
                '67e941f80831114bcb33d6a2',
                '67e3a9e27dcd5a5316f96300'
            ];

            // Function to check admin status
            async function checkAdminStatus() {
                try {
                    // Get user ID from localStorage or your auth system
                    const userId = localStorage.getItem('userId');
                    console.log('User ID:', userId);
                    
                    // Check if user is admin
                    isAdmin = ADMIN_USER_IDS.includes(userId);
                    console.log('Is admin:', isAdmin);
                    return isAdmin;
                } catch (error) {
                    console.error('Error checking admin status:', error);
                    return false;
                }
            }

            // Function to update visibility options based on admin status
            function updateVisibilityOptions(isAdmin) {
                const visibilitySelect = document.getElementById('visibility');
                
                // Always keep Private option
                visibilitySelect.innerHTML = '<option value="Private">Private</option>';
                
                if (isAdmin) {
                    // Add Public option for admins
                    const publicOption = document.createElement('option');
                    publicOption.value = 'Public';
                    publicOption.textContent = 'Public';
                    visibilitySelect.appendChild(publicOption);
                    adminOnlyLabel.style.display = 'inline';
                } else {
                    adminOnlyLabel.style.display = 'none';
                }
            }

            // Initialize the form
            async function initializeForm() {
                // Set default start time (now + 1 hour)
                const now = new Date();
                now.setHours(now.getHours() + 1);
                document.getElementById('start-time').value = now.toISOString().slice(0, 16);
                
                // Set default end time (start time + 2 hours)
                const endTime = new Date(now);
                endTime.setHours(endTime.getHours() + 2);
                document.getElementById('end-time').value = endTime.toISOString().slice(0, 16);
                
                // Generate a random contest code if empty
                if (!document.getElementById('contest-code').value) {
                    document.getElementById('contest-code').value = 
                        'CP-' + Math.random().toString(36).substring(2, 8).toUpperCase();
                }
                
                // Check admin status and update visibility options
                const adminStatus = await checkAdminStatus();
                updateVisibilityOptions(adminStatus);
            }

            // Problem search functionality
            problemSearch.addEventListener('input', function(e) {
                clearTimeout(debounceTimer);
                const searchTerm = e.target.value.trim();
                
                if (searchTerm.length < 2) {
                    searchResults.style.display = 'none';
                    return;
                }
                
                debounceTimer = setTimeout(() => {
                    searchProblems(searchTerm);
                }, 300);
            });

            // Close search results when clicking outside
            document.addEventListener('click', function(e) {
                if (!e.target.closest('.search-container')) {
                    searchResults.style.display = 'none';
                }
            });

            // Search problems in database
            async function searchProblems(searchTerm) {
                try {
                    const response = await fetch(`/api/problems/search?q=${encodeURIComponent(searchTerm)}`);
                    if (!response.ok) throw new Error('Network response was not ok');
                    
                    const problems = await response.json();
                    if (!Array.isArray(problems)) throw new Error('Invalid response format');
                    
                    displaySearchResults(problems);
                } catch (error) {
                    console.error('Search failed:', error);
                    searchResults.innerHTML = '<div class="search-result-item">Error loading problems</div>';
                    searchResults.style.display = 'block';
                }
            }

            // Display search results
            function displaySearchResults(problems) {
                const results = Array.isArray(problems) ? problems : [];
                
                if (results.length === 0) {
                    searchResults.innerHTML = '<div class="search-result-item">No problems found</div>';
                    searchResults.style.display = 'block';
                    return;
                }

                searchResults.innerHTML = results.map(problem => `
                    <div class="search-result-item" data-id="${problem._id}">
                        <strong>${problem.title}</strong> (${problem.difficulty})
                        <div class="text-muted">${problem.description?.substring(0, 50) || ''}...</div>
                    </div>
                `).join('');

                // Add click handlers to search results
                document.querySelectorAll('.search-result-item').forEach(item => {
                    item.addEventListener('click', function() {
                        const problemId = this.getAttribute('data-id');
                        const problemTitle = this.querySelector('strong').textContent;
                        const problemDifficulty = this.textContent.match(/\(([^)]+)\)/)[1];
                        
                        addProblemToSelection({
                            _id: problemId,
                            title: problemTitle,
                            difficulty: problemDifficulty
                        });
                        
                        problemSearch.value = '';
                        searchResults.style.display = 'none';
                    });
                });

                searchResults.style.display = 'block';
            }

            // Add problem to selected list
            function addProblemToSelection(problem) {
                if (selectedProblemsList.some(p => p._id === problem._id)) {
                    alert('This problem is already added');
                    return;
                }

                selectedProblemsList.push(problem);
                renderSelectedProblems();
                updateHiddenInput();
            }

            // Render selected problems list
            function renderSelectedProblems() {
                if (selectedProblemsList.length === 0) {
                    selectedProblems.innerHTML = '<p class="empty-message">No problems selected yet</p>';
                    return;
                }

                selectedProblems.innerHTML = selectedProblemsList.map((problem, index) => `
                    <div class="selected-problem" data-id="${problem._id}">
                        <span>
                            <strong>${problem.title}</strong> (${problem.difficulty})
                        </span>
                        <span class="remove-problem" data-index="${index}">âœ• Remove</span>
                    </div>
                `).join('');

                // Add remove handlers
                document.querySelectorAll('.remove-problem').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const index = parseInt(this.getAttribute('data-index'));
                        selectedProblemsList.splice(index, 1);
                        renderSelectedProblems();
                        updateHiddenInput();
                    });
                });
            }

            // Update hidden input with selected problem IDs
            function updateHiddenInput() {
                selectedProblemsInput.value = JSON.stringify(selectedProblemsList.map(p => p._id));
            }

            // Handle form submission
            form.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    if (selectedProblemsList.length === 0) {
        alert('Please select at least one problem');
        return;
    }

    const userId = localStorage.getItem('userId');
    if (!userId) {
        alert('User ID is required to create a contest');
        return;
    }

    // Get the selected visibility value
    const visibilitySelect = document.getElementById('visibility');
    const selectedVisibility = visibilitySelect.value;
    console.log(selectedVisibility);
    const formData = {
        name: document.getElementById('contest-name').value,
        contestCode: document.getElementById('contest-code').value,
        description: document.getElementById('contest-description').value,
        startTime: document.getElementById('start-time').value,
        endTime: document.getElementById('end-time').value,
        difficulty: document.getElementById('difficulty').value,
        visibility: selectedVisibility,  // Use the selected value
        problems: selectedProblemsList.map(p => p._id),
        userId: userId
    };

    console.log('Form data being sent:', formData); // Debug log

    try {
        const response = await fetch('/api/contests', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });
        
        const result = await response.json();
        console.log('Full response from server:', result); // Debug log
        
        if (response.ok && result.success) {
            // Use the visibility from the form if not in response
            const visibility = result.contest?.visibility || selectedVisibility;
            console.log('Using visibility:', visibility); // Debug log
            
            // Create success message
            const successMessage = `Contest created successfully!
Status: ${result.contest.status}
Visibility: ${visibility}
Code: ${result.contest.contestCode}`;

            // Rest of your notification code...
            const notification = document.createElement('div');
            notification.style.position = 'fixed';
            notification.style.top = '20px';
            notification.style.right = '20px';
            notification.style.padding = '15px';
            notification.style.background = '#4CAF50';
            notification.style.color = 'white';
            notification.style.borderRadius = '5px';
            notification.style.zIndex = '1000';
            notification.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';

            notification.innerHTML = `
                <p style="margin:0 0 10px 0;">${successMessage.replace(/\n/g, '<br>')}</p>
                <button id="copy-code-btn" style="
                    background: white;
                    color: #4CAF50;
                    border: none;
                    padding: 5px 10px;
                    border-radius: 3px;
                    cursor: pointer;
                ">Copy Code</button>
            `;

            document.body.appendChild(notification);

            // Add copy functionality
            document.getElementById('copy-code-btn').addEventListener('click', function() {
                navigator.clipboard.writeText(result.contest.contestCode)
                    .then(() => {
                        this.textContent = 'Copied!';
                        setTimeout(() => {
                            notification.remove();
                        }, 2000);
                    })
                    .catch(err => {
                        console.error('Failed to copy: ', err);
                        this.textContent = 'Failed to copy';
                    });
            });

            // Auto-close after 5 seconds
            setTimeout(() => {
                notification.remove();
            }, 10000);
            
        } else {
            alert(result.msg || 'Failed to create contest');
        }
    } catch (error) {
        console.error('Error creating contest:', error);
        alert('Failed to create contest. Please try again.');
    }
});
            // Initialize the form
            initializeForm();
        });
    </script>
</body>
</html>